import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { voiceCard, trendTitle, platforms, niche } = await req.json();
    const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY');

    if (!GEMINI_API_KEY) {
      throw new Error('GEMINI_API_KEY is not configured. Get a free key at https://ai.google.dev');
    }

    console.log('Generating content kit for trend:', trendTitle);

    const prompt = `Using the Voice Card below and the Trend topic, create ${platforms.length} platform-specific posts.

For each platform, output:
- Hook (≤80 characters, attention-grabbing)
- Body (≤220 words, engaging and valuable)
- CTA (clear call-to-action)
- Hashtags (7-10 relevant hashtags)

Platforms: ${platforms.join(', ')}

Voice Card:
${voiceCard}

Trend Topic: ${trendTitle}
Niche: ${niche}

Format as JSON array with objects containing: platform, hook, body, cta, hashtags (array of strings).`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.3,
          topP: 0.8,
          topK: 40,
          maxOutputTokens: 2048,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_ONLY_HIGH"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_ONLY_HIGH"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_ONLY_HIGH"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_ONLY_HIGH"
          }
        ]
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error:', response.status, errorText);
      
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ error: 'Rate limit exceeded. Please try again later.' }),
          { status: 429, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      
      throw new Error(`Gemini API error: ${response.status}`);
    }

    const data = await response.json();
    
    console.log('Gemini API response:', JSON.stringify({
      hasCandidates: !!data.candidates,
      candidatesLength: data.candidates?.length,
      promptFeedback: data.promptFeedback,
      finishReason: data.candidates?.[0]?.finishReason
    }));
    
    // Check if response was blocked by safety filters
    if (!data.candidates || data.candidates.length === 0) {
      console.error('No candidates in response:', JSON.stringify(data));
      
      // Check if it was blocked by safety settings
      if (data.promptFeedback?.blockReason) {
        throw new Error(`Content generation was blocked: ${data.promptFeedback.blockReason}. Please try a different trend topic.`);
      }
      
      throw new Error('Content generation failed. The AI did not return any results. Please try with a different trend topic or simpler description.');
    }
    
    // Check finish reason
    const finishReason = data.candidates[0]?.finishReason;
    if (finishReason && finishReason !== 'STOP') {
      console.warn('Unusual finish reason:', finishReason);
      if (finishReason === 'SAFETY') {
        throw new Error('Content generation was stopped due to safety filters. Please try a different trend topic.');
      }
    }

    // Safely extract content
    const candidate = data.candidates[0];
    if (!candidate || !candidate.content || !candidate.content.parts || !candidate.content.parts[0]) {
      console.error('Incomplete candidate structure:', JSON.stringify(candidate));
      throw new Error('AI returned incomplete response structure. Please try again.');
    }
    
    let content = candidate.content.parts[0].text;
    
    if (!content || typeof content !== 'string') {
      console.error('Invalid content type:', typeof content);
      throw new Error('AI returned invalid content. Please try again.');
    }
    console.log('Raw AI response length:', content.length);
    console.log('Raw AI response (first 1000 chars):', content.substring(0, 1000));
    
    // Clean up the response - remove markdown code blocks
    content = content.replace(/```json\s*/g, '').replace(/```\s*/g, '').trim();
    console.log('After markdown cleanup (first 500):', content.substring(0, 500));
    
    // Extract JSON array if there's other text around it
    const arrayMatch = content.match(/\[[\s\S]*\]/);
    if (arrayMatch) {
      content = arrayMatch[0];
      console.log('Extracted array, length:', content.length);
    }
    
    // Remove any non-JSON text before or after the array
    content = content.replace(/^[^\[]*/, '').replace(/[^\]]*$/, '').trim();
    console.log('After extra text removal (first 200):', content.substring(0, 200));
    
    // Try to parse JSON, with fallback handling
    let contentKits;
    try {
      contentKits = JSON.parse(content);
      console.log('Successfully parsed JSON on first attempt');
    } catch (parseError) {
      console.error('Failed to parse JSON response. Attempting cleanup...');
      console.error('Parse error:', parseError);
      console.error('Content length:', content.length);
      console.error('Full content:', content);
      
      // Try to fix common JSON issues
      let cleaned = '';
      try {
        // Aggressive cleanup for malformed JSON
        cleaned = content
          // Remove control characters
          .replace(/[\u0000-\u001F\u007F-\u009F]/g, '')
          // Replace smart quotes with regular quotes
          .replace(/[\u201C\u201D]/g, '"')
          .replace(/[\u2018\u2019]/g, "'")
          // Replace em/en dashes
          .replace(/[\u2013\u2014]/g, '-')
          // Remove emoji and special Unicode
          .replace(/[\u{1F600}-\u{1F64F}]/gu, '') // Emoticons
          .replace(/[\u{1F300}-\u{1F5FF}]/gu, '') // Symbols & pictographs
          .replace(/[\u{1F680}-\u{1F6FF}]/gu, '') // Transport & map
          .replace(/[\u{2600}-\u{26FF}]/gu, '') // Misc symbols
          .replace(/[\u{2700}-\u{27BF}]/gu, '') // Dingbats
          // Fix newlines
          .replace(/"\s*\n\s*/g, '" ')
          .replace(/\n/g, ' ')
          // Normalize spaces
          .replace(/\s+/g, ' ')
          .trim();
        
        console.log('Cleaned content (first 500):', cleaned.substring(0, 500));
        contentKits = JSON.parse(cleaned);
        console.log('Successfully parsed after cleanup');
      } catch (secondError: unknown) {
        const errorMsg = secondError instanceof Error ? secondError.message : 'Unknown error';
        console.error('Second parse attempt failed:', errorMsg);
        console.error('Cleaned content (first 800):', cleaned.substring(0, 800));
        
        // Last resort: Try to extract individual objects and rebuild array
        try {
          const objectRegex = /\{[^{}]*"platform"[^{}]*"hashtags"[^{}]*\}/g;
          const matches = cleaned.match(objectRegex);
          if (matches && matches.length > 0) {
            console.log(`Found ${matches.length} potential objects, trying to parse...`);
            const parsed = matches.map(m => JSON.parse(m));
            contentKits = parsed;
            console.log('Successfully rebuilt array from individual objects');
          } else {
            throw new Error(`Failed to parse AI response. ${errorMsg}`);
          }
        } catch (thirdError) {
          throw new Error(`Failed to parse AI response as JSON. Parse error: ${errorMsg}. Please try again.`);
        }
      }
    }

    // Validate the structure
    if (!Array.isArray(contentKits) || contentKits.length === 0) {
      throw new Error('Invalid content kit format received from AI.');
    }

    console.log(`Content kit generated successfully with ${contentKits.length} posts`);

    return new Response(
      JSON.stringify({ contentKits }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('Error in generate-content-kit:', error);
    
    // Provide more specific error messages
    let errorMessage = 'An error occurred while generating content.';
    if (error instanceof Error) {
      errorMessage = error.message;
    }
    
    return new Response(
      JSON.stringify({ 
        error: errorMessage,
        details: error instanceof Error ? error.stack : undefined 
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});